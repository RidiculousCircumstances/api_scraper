version: '3.9'

networks:
  scraper:
    external: false
  postgres:
    driver: bridge

volumes:
  dbdata:
    driver: local

services:
  php-fpm:
    build:
      dockerfile: docker/php-fpm/Dockerfile
    ports:
      - "8000:5000"
    volumes:
      - ./scraper:/var/www
    tty: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - scraper
      - postgres
#
#  composer:
#    build:
#      dockerfile: ./docker/composer/Dockerfile
#    environment:
#      APP_UID: ${APP_UID}
#      APP_GID: ${APP_GID}
#    volumes:
#      - ./scraper:/var/www

  nginx:
    build:
      dockerfile: docker/nginx/Dockerfile
    volumes:
      - ./scraper:/var/www
      - ./docker/nginx/ssl:/etc/nginx/ssl
    ports:
      - "8080:443"
    links:
      - php-fpm
    networks:
      - scraper

  db:
    build:
      context: .
      dockerfile: ./docker/postgre/Dockerfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - type: bind
        source: ./docker/postgre/init
        target: /docker-entrypoint-initdb.d
      - type: volume
        source: dbdata
        target: /var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U db_user -d scraper_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - postgres